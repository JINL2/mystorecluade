// lib/features/cash_ending/presentation/pages/cash_ending_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../app/providers/app_state_provider.dart';
import '../../../../shared/themes/toss_colors.dart';
import '../../../../shared/themes/toss_spacing.dart';
import '../../../../shared/themes/toss_text_styles.dart';
import '../../../../shared/widgets/common/toss_scaffold.dart';
import '../../../../shared/widgets/toss/toss_card.dart';
import '../../domain/entities/cash_ending.dart';
import '../../domain/entities/currency.dart';
import '../../domain/entities/denomination.dart';
import '../providers/cash_ending_provider.dart';
import '../providers/cash_ending_state.dart';
import '../widgets/denomination_input.dart';
import '../widgets/location_selector.dart';
import '../widgets/sheets/currency_selector_sheet.dart';
import '../widgets/sheets/location_selector_sheet.dart';
import '../widgets/sheets/store_selector_sheet.dart';
import '../widgets/store_selector.dart';
import '../widgets/total_display.dart';

/// Cash Ending Page
///
/// Main page for cash ending feature based on legacy structure.
class CashEndingPage extends ConsumerStatefulWidget {
  const CashEndingPage({super.key});

  @override
  ConsumerState<CashEndingPage> createState() => _CashEndingPageState();
}

class _CashEndingPageState extends ConsumerState<CashEndingPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  // Store denomination quantities locally for UI updates
  final Map<String, Map<String, int>> _denominationQuantities = {};

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);

    // Listen to tab changes
    _tabController.addListener(() {
      if (!_tabController.indexIsChanging) {
        ref.read(cashEndingProvider.notifier).setCurrentTab(_tabController.index);
      }
    });

    // Load initial data
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final companyId = ref.read(appStateProvider).companyChoosen;
      if (companyId.isNotEmpty) {
        // Load all necessary data
        ref.read(cashEndingProvider.notifier).loadStores(companyId);
        ref.read(cashEndingProvider.notifier).loadCurrencies(companyId);
      }
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  void _updateDenominationQuantity(String currencyId, String denominationId, int quantity) {
    setState(() {
      _denominationQuantities.putIfAbsent(currencyId, () => {});
      _denominationQuantities[currencyId]![denominationId] = quantity;
    });
  }

  double _calculateTotal(String currencyId) {
    final state = ref.read(cashEndingProvider);
    if (state.currencies.isEmpty) return 0.0;

    final currency = state.currencies.firstWhere(
      (c) => c.currencyId == currencyId,
      orElse: () => state.currencies.first,
    );

    double total = 0.0;
    final quantities = _denominationQuantities[currencyId] ?? {};

    for (final denom in currency.denominations) {
      final quantity = quantities[denom.denominationId] ?? 0;
      total += denom.value * quantity;
    }

    return total;
  }

  Future<void> _saveCashEnding(
    BuildContext context,
    CashEndingState state,
    String currencyId,
  ) async {
    // Validation
    if (state.selectedCashLocationId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a cash location')),
      );
      return;
    }

    final companyId = ref.read(appStateProvider).companyChoosen;
    final userId = ref.read(appStateProvider).user['user_id']?.toString() ?? '';

    if (companyId.isEmpty || userId.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Invalid company or user')),
      );
      return;
    }

    // Get currency
    final currency = state.currencies.firstWhere(
      (c) => c.currencyId == currencyId,
      orElse: () => state.currencies.first,
    );

    // Build currency list with denominations
    final quantities = _denominationQuantities[currencyId] ?? {};
    final currenciesWithData = <Currency>[];

    // Only include currencies with data
    if (quantities.isNotEmpty && quantities.values.any((q) => q > 0)) {
      final denominationsWithQuantity = currency.denominations.map((denom) {
        final quantity = quantities[denom.denominationId] ?? 0;
        return denom.copyWith(quantity: quantity);
      }).toList();

      currenciesWithData.add(Currency(
        currencyId: currency.currencyId,
        currencyCode: currency.currencyCode,
        currencyName: currency.currencyName,
        symbol: currency.symbol,
        denominations: denominationsWithQuantity,
      ));
    }

    if (currenciesWithData.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter at least one denomination quantity')),
      );
      return;
    }

    // Create CashEnding entity
    final now = DateTime.now();
    final cashEnding = CashEnding(
      companyId: companyId,
      locationId: state.selectedCashLocationId!,
      storeId: state.selectedStoreId,
      userId: userId,
      recordDate: now,
      createdAt: now,
      currencies: currenciesWithData,
    );

    // Save
    final success = await ref.read(cashEndingProvider.notifier).saveCashEnding(cashEnding);

    if (!mounted) return;

    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Cash ending saved successfully'),
          backgroundColor: TossColors.success,
        ),
      );

      // Clear local quantities
      setState(() {
        _denominationQuantities.clear();
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(state.error ?? 'Failed to save cash ending'),
          backgroundColor: TossColors.error,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(cashEndingProvider);

    return TossScaffold(
      appBar: AppBar(
        title: const Text('Cash Ending'),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'Cash'),
            Tab(text: 'Bank'),
            Tab(text: 'Vault'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildCashTab(state),
          _buildBankTab(state),
          _buildVaultTab(state),
        ],
      ),
    );
  }

  Widget _buildCashTab(CashEndingState state) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(TossSpacing.space4),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Card 1: Store and Location Selection
          TossCard(
            padding: const EdgeInsets.all(TossSpacing.space5),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Store Selector
                StoreSelector(
                  stores: state.stores,
                  selectedStoreId: state.selectedStoreId,
                  onTap: () {
                    final companyId = ref.read(appStateProvider).companyChoosen;
                    StoreSelectorSheet.show(
                      context: context,
                      ref: ref,
                      stores: state.stores,
                      selectedStoreId: state.selectedStoreId,
                      companyId: companyId,
                    );
                  },
                ),

                // Location Selector (show if store selected)
                if (state.selectedStoreId != null) ...[
                  const SizedBox(height: TossSpacing.space6),
                  LocationSelector(
                    locationType: 'cash',
                    isLoading: false, // TODO: Add isLoadingLocations to state
                    locations: state.cashLocations,
                    selectedLocationId: state.selectedCashLocationId,
                    onTap: () {
                      LocationSelectorSheet.show(
                        context: context,
                        ref: ref,
                        locationType: 'cash',
                        locations: state.cashLocations,
                        selectedLocationId: state.selectedCashLocationId,
                      );
                    },
                  ),
                ],
              ],
            ),
          ),

          // Card 2: Cash Counting (show if location selected)
          if (state.selectedCashLocationId != null) ...[
            const SizedBox(height: TossSpacing.space6),
            TossCard(
              padding: const EdgeInsets.all(TossSpacing.space5),
              child: _buildCashCountingSection(state),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildCashCountingSection(CashEndingState state) {
    if (state.isLoadingCurrencies) {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(TossSpacing.space8),
          child: CircularProgressIndicator(),
        ),
      );
    }

    if (state.currencies.isEmpty) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(TossSpacing.space8),
          child: Column(
            children: [
              const Icon(Icons.inbox, size: 64, color: TossColors.gray400),
              const SizedBox(height: TossSpacing.space4),
              Text(
                'No currencies available',
                style: TossTextStyles.bodyLarge.copyWith(color: TossColors.gray600),
              ),
              const SizedBox(height: TossSpacing.space2),
              Text(
                'Please configure currencies for your company',
                style: TossTextStyles.body.copyWith(color: TossColors.gray500),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );
    }

    final selectedCurrencyId = state.selectedCashCurrencyId ?? state.currencies.first.currencyId;
    final currency = state.currencies.firstWhere(
      (c) => c.currencyId == selectedCurrencyId,
      orElse: () => state.currencies.first,
    );

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        // Header: "Cash Count" title + Currency selector
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Cash Count',
              style: TossTextStyles.body.copyWith(
                fontWeight: FontWeight.w700,
                fontSize: 17,
              ),
            ),
            if (state.currencies.length > 1)
              GestureDetector(
                onTap: () {
                  CurrencySelectorSheet.show(
                    context: context,
                    ref: ref,
                    currencies: state.currencies,
                    selectedCurrencyId: selectedCurrencyId,
                    tabType: 'cash',
                  );
                },
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      currency.currencyCode,
                      style: TossTextStyles.body.copyWith(
                        color: TossColors.primary,
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                    ),
                    const Icon(
                      Icons.arrow_drop_down,
                      color: TossColors.primary,
                      size: 24,
                    ),
                  ],
                ),
              ),
          ],
        ),

        const SizedBox(height: TossSpacing.space5),

        // Denomination Inputs
        if (currency.denominations.isEmpty)
          Center(
            child: Padding(
              padding: const EdgeInsets.all(TossSpacing.space8),
              child: Text(
                'No denominations configured for this currency',
                style: TossTextStyles.body.copyWith(
                  color: TossColors.gray500,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          )
        else
          ...currency.denominations.map((denom) {
            final quantities = _denominationQuantities[selectedCurrencyId] ?? {};
            final currentQuantity = quantities[denom.denominationId] ?? 0;

            return DenominationInput(
              denomination: denom.copyWith(quantity: currentQuantity),
              currencySymbol: currency.symbol,
              onQuantityChanged: (quantity) {
                _updateDenominationQuantity(
                  selectedCurrencyId,
                  denom.denominationId,
                  quantity,
                );
              },
            );
          }),

        const SizedBox(height: TossSpacing.space8),

        // Total Display
        TotalDisplay(
          totalAmount: _calculateTotal(selectedCurrencyId),
          currencySymbol: currency.symbol,
          label: 'Cash Total',
        ),

        const SizedBox(height: TossSpacing.space10),

        // Submit Button
        ElevatedButton(
          onPressed: state.isSaving
              ? null
              : () async {
                  await _saveCashEnding(context, state, selectedCurrencyId);
                },
          style: ElevatedButton.styleFrom(
            backgroundColor: TossColors.primary,
            foregroundColor: TossColors.white,
            padding: const EdgeInsets.symmetric(vertical: TossSpacing.space4),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          child: state.isSaving
              ? const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(TossColors.white),
                  ),
                )
              : Text(
                  'Save Cash Ending',
                  style: TossTextStyles.h4.copyWith(
                    fontWeight: FontWeight.bold,
                    color: TossColors.white,
                  ),
                ),
        ),
      ],
    );
  }

  Widget _buildBankTab(CashEndingState state) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.account_balance,
            size: 64,
            color: TossColors.success,
          ),
          const SizedBox(height: TossSpacing.space4),
          Text(
            'Bank Tab',
            style: TossTextStyles.h2,
          ),
          const SizedBox(height: TossSpacing.space2),
          Text(
            'Bank ending functionality will be implemented here',
            style: TossTextStyles.body.copyWith(
              color: TossColors.gray600,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildVaultTab(CashEndingState state) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.lock,
            size: 64,
            color: TossColors.warning,
          ),
          const SizedBox(height: TossSpacing.space4),
          Text(
            'Vault Tab',
            style: TossTextStyles.h2,
          ),
          const SizedBox(height: TossSpacing.space2),
          Text(
            'Vault ending functionality will be implemented here',
            style: TossTextStyles.body.copyWith(
              color: TossColors.gray600,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}
