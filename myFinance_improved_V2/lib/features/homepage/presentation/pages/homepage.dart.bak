import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:myfinance_improved/app/providers/app_state.dart';
import 'package:myfinance_improved/app/providers/app_state_provider.dart';
import 'package:myfinance_improved/features/homepage/presentation/providers/homepage_providers.dart';
import 'package:myfinance_improved/shared/themes/toss_colors.dart';
import 'package:myfinance_improved/shared/themes/toss_spacing.dart';
import 'package:myfinance_improved/shared/themes/toss_text_styles.dart';
import 'package:myfinance_improved/features/auth/presentation/providers/auth_state_provider.dart';
import 'package:myfinance_improved/features/auth/presentation/providers/auth_service.dart';
import 'package:myfinance_improved/features/homepage/presentation/widgets/company_store_selector.dart';
import 'package:myfinance_improved/features/homepage/presentation/widgets/feature_grid.dart';
import 'package:myfinance_improved/features/homepage/presentation/widgets/quick_access_section.dart';
import 'package:myfinance_improved/features/homepage/presentation/widgets/revenue_card.dart';
import 'package:myfinance_improved/shared/themes/toss_shadows.dart';

class Homepage extends ConsumerStatefulWidget {
  const Homepage({super.key});

  @override
  ConsumerState<Homepage> createState() => _HomepageState();
}

class _HomepageState extends ConsumerState<Homepage> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    // Watch user companies provider to ensure AppState is initialized
    final userCompaniesAsync = ref.watch(userCompaniesProvider);

    // Wait for user companies to load before building UI
    return userCompaniesAsync.when(
      data: (_) => _buildHomepage(),
      loading: () => Scaffold(
        backgroundColor: TossColors.gray100,
        body: Center(
          child: CircularProgressIndicator(color: TossColors.primary),
        ),
      ),
      error: (error, stack) => Scaffold(
        backgroundColor: TossColors.gray100,
        body: Center(
          child: Text(
            'Error loading data: $error',
            style: TossTextStyles.body.copyWith(color: TossColors.error),
          ),
        ),
      ),
    );
  }

  Widget _buildHomepage() {
    final appState = ref.watch(appStateProvider);

    return Scaffold(
      key: _scaffoldKey,
      backgroundColor: TossColors.gray100,
      body: RefreshIndicator(
        onRefresh: () => _handleRefresh(),
        color: TossColors.primary,
        child: CustomScrollView(
          slivers: [
            // App Bar
            _buildAppBar(),

            // Hello Section (Pinned)
            _buildHelloSection(),

            // Revenue Card (if company selected)
            if (appState.companyChoosen.isNotEmpty)
              const SliverToBoxAdapter(
                child: RevenueCard(),
              ),

            const SliverToBoxAdapter(
              child: SizedBox(height: TossSpacing.space4),
            ),

            // Quick Access Section
            const SliverToBoxAdapter(
              child: QuickAccessSection(),
            ),

            // Feature Grid
            const SliverToBoxAdapter(
              child: FeatureGrid(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAppBar() {
    return SliverAppBar(
      pinned: true,
      floating: false,
      snap: false,
      backgroundColor: TossColors.gray100,
      surfaceTintColor: TossColors.transparent,
      shadowColor: TossColors.transparent,
      elevation: 0,
      toolbarHeight: 64,
      leading: IconButton(
        icon: Icon(Icons.menu, color: TossColors.textSecondary, size: 24),
        onPressed: () {
          _showCompanyStoreDrawer();
        },
        padding: const EdgeInsets.all(TossSpacing.space3),
      ),
      actions: [
        // Notifications
        IconButton(
          icon: Icon(
            Icons.notifications_none_rounded,
            color: TossColors.textSecondary,
            size: 24,
          ),
          onPressed: () {
            // TODO: Navigate to notifications
          },
          padding: const EdgeInsets.all(TossSpacing.space3),
        ),

        // Profile
        Padding(
          padding: const EdgeInsets.only(right: TossSpacing.space4),
          child: PopupMenuButton<String>(
            offset: const Offset(0, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(TossSpacing.space3),
            ),
            color: TossColors.surface,
            elevation: 2,
            onSelected: (value) async {
              if (value == 'logout') {
                await _handleLogout();
              } else if (value == 'profile') {
                // Navigate to profile page if needed
              }
            },
            itemBuilder: (BuildContext context) => [
              PopupMenuItem<String>(
                value: 'profile',
                child: Row(
                  children: [
                    Icon(
                      Icons.person_outline,
                      color: TossColors.textSecondary,
                      size: 20,
                    ),
                    const SizedBox(width: TossSpacing.space3),
                    Text(
                      'My Profile',
                      style: TossTextStyles.body.copyWith(
                        color: TossColors.textPrimary,
                      ),
                    ),
                  ],
                ),
              ),
              const PopupMenuDivider(),
              PopupMenuItem<String>(
                value: 'logout',
                child: Row(
                  children: [
                    Icon(
                      Icons.logout_rounded,
                      color: TossColors.error,
                      size: 20,
                    ),
                    const SizedBox(width: TossSpacing.space3),
                    Text(
                      'Logout',
                      style: TossTextStyles.body.copyWith(
                        color: TossColors.error,
                      ),
                    ),
                  ],
                ),
              ),
            ],
            child: CircleAvatar(
              radius: 20,
              backgroundColor: TossColors.primary.withOpacity(0.1),
              child: Text(
                _getUserInitials(),
                style: TossTextStyles.bodyLarge.copyWith(
                  color: TossColors.primary,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildHelloSection() {
    final appState = ref.watch(appStateProvider);

    return SliverPersistentHeader(
      pinned: true,
      delegate: _PinnedHelloDelegate(
        appState: appState,
      ),
    );
  }

  String _getUserInitials() {
    final appState = ref.read(appStateProvider);
    final userId = appState.userId;

    if (userId.isEmpty) return 'U';

    // TODO: Get actual user name from user data
    return 'U';
  }

  /// Show company & store selector drawer
  void _showCompanyStoreDrawer() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      isDismissible: true,
      enableDrag: true,
      builder: (context) => const CompanyStoreSelector(),
    );
  }

  /// Handle logout with enterprise-grade cleanup
  ///
  /// Safe logout flow that prevents widget tree errors:
  /// 1. Read all providers BEFORE starting logout
  /// 2. Execute auth signOut (triggers GoRouter redirect)
  /// 3. Let GoRouter handle navigation automatically
  /// 4. NO manual pop() - let the menu close naturally during navigation
  Future<void> _handleLogout() async {
    final appState = ref.watch(appStateProvider);

    if (companies.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.business_outlined, size: 64, color: TossColors.textTertiary),
            const SizedBox(height: TossSpacing.space4),
            Text(
              'No Companies',
              style: TossTextStyles.h3.copyWith(color: TossColors.textSecondary),
            ),
            const SizedBox(height: TossSpacing.space2),
            Text(
              'Create or join a company to get started',
              style: TossTextStyles.body.copyWith(color: TossColors.textTertiary),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(TossSpacing.space4),
      itemCount: companies.length,
      itemBuilder: (context, index) {
        final company = companies[index];
        final companyId = company['company_id'] as String;
        final companyName = company['company_name'] as String;
        final stores = company['stores'] as List<dynamic>? ?? [];
        final isSelected = appState.companyChoosen == companyId;

        return Container(
          margin: const EdgeInsets.only(bottom: TossSpacing.space3),
          decoration: BoxDecoration(
            color: TossColors.surface,
            borderRadius: BorderRadius.circular(TossBorderRadius.lg),
            border: Border.all(
              color: isSelected ? TossColors.primary.withOpacity(0.3) : TossColors.border,
              width: isSelected ? 2 : 1,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Company Header
              InkWell(
                onTap: () {
                  final appStateNotifier = ref.read(appStateProvider.notifier);
                  appStateNotifier.selectCompany(companyId, companyName: companyName);

                  // Auto-select first store
                  if (stores.isNotEmpty) {
                    final firstStore = stores.first;
                    appStateNotifier.selectStore(
                      firstStore['store_id'] as String,
                      storeName: firstStore['store_name'] as String,
                    );
                  }

                  Navigator.of(context).pop();
                },
                borderRadius: BorderRadius.circular(TossBorderRadius.lg),
                child: Padding(
                  padding: const EdgeInsets.all(TossSpacing.space4),
                  child: Row(
                    children: [
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: isSelected ? TossColors.primary : TossColors.gray200,
                          borderRadius: BorderRadius.circular(TossBorderRadius.md),
                        ),
                        child: Icon(
                          Icons.business,
                          color: isSelected ? TossColors.white : TossColors.textSecondary,
                          size: 20,
                        ),
                      ),
                      const SizedBox(width: TossSpacing.space3),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              companyName,
                              style: TossTextStyles.bodyLarge.copyWith(
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 2),
                            Text(
                              '${stores.length} ${stores.length == 1 ? 'store' : 'stores'}',
                              style: TossTextStyles.caption.copyWith(
                                color: TossColors.textTertiary,
                              ),
                            ),
                          ],
                        ),
                      ),
                      if (isSelected)
                        const Icon(Icons.check_circle, color: TossColors.primary),
                    ],
                  ),
                ),
              ),

              // View Codes Button (if company is selected)
              if (isSelected)
                _buildViewCodesButton(context, company),

              // Stores List (if company is selected)
              if (isSelected && stores.isNotEmpty) ...[
                const Divider(height: 1),
                Padding(
                  padding: const EdgeInsets.all(TossSpacing.space3),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Stores',
                        style: TossTextStyles.caption.copyWith(
                          color: TossColors.textTertiary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: TossSpacing.space2),
                      ...stores.map((store) {
                        final storeId = store['store_id'] as String;
                        final storeName = store['store_name'] as String;
                        final isStoreSelected = appState.storeChoosen == storeId;

                        return InkWell(
                          onTap: () {
                            final appStateNotifier = ref.read(appStateProvider.notifier);
                            appStateNotifier.selectStore(storeId, storeName: storeName);

                            Navigator.of(context).pop();
                          },
                          borderRadius: BorderRadius.circular(TossBorderRadius.md),
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: TossSpacing.space3,
                              vertical: TossSpacing.space2,
                            ),
                            margin: const EdgeInsets.only(bottom: TossSpacing.space1),
                            decoration: BoxDecoration(
                              color: isStoreSelected ? TossColors.primary.withOpacity(0.1) : Colors.transparent,
                              borderRadius: BorderRadius.circular(TossBorderRadius.md),
                            ),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.store_outlined,
                                  size: 18,
                                  color: isStoreSelected ? TossColors.primary : TossColors.textSecondary,
                                ),
                                const SizedBox(width: TossSpacing.space2),
                                Expanded(
                                  child: Text(
                                    storeName,
                                    style: TossTextStyles.body.copyWith(
                                      fontWeight: isStoreSelected ? FontWeight.w600 : FontWeight.w500,
                                      color: isStoreSelected ? TossColors.primary : TossColors.textPrimary,
                                    ),
                                  ),
                                ),
                                if (isStoreSelected)
                                  const Icon(Icons.check, color: TossColors.primary, size: 18),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    ],
                  ),
                ),
              ],
            ],
          ),
        );
      },
    );
  }

  /// Build "View codes" button for selected company
  Widget _buildViewCodesButton(BuildContext context, dynamic company) {
    return Container(
      margin: const EdgeInsets.only(
        top: TossSpacing.space2,
        left: TossSpacing.space3,
        right: TossSpacing.space3,
      ),
      child: Material(
        color: TossColors.transparent,
        child: InkWell(
          onTap: () => _showCodesBottomSheet(context, company),
          borderRadius: BorderRadius.circular(TossBorderRadius.md),
          child: Container(
            padding: const EdgeInsets.symmetric(
              horizontal: TossSpacing.space3,
              vertical: TossSpacing.space2,
            ),
            decoration: BoxDecoration(
              color: TossColors.gray100,
              borderRadius: BorderRadius.circular(TossBorderRadius.md),
              border: Border.all(color: TossColors.border),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.qr_code_2_rounded,
                  size: 18,
                  color: TossColors.textSecondary,
                ),
                const SizedBox(width: TossSpacing.space2),
                Text(
                  'View codes',
                  style: TossTextStyles.body.copyWith(
                    fontWeight: FontWeight.w500,
                    color: TossColors.textSecondary,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// Show bottom sheet with company and store codes
  void _showCodesBottomSheet(BuildContext context, dynamic company) {
    // Debug: Print company data structure
    debugPrint('🔍 [CodesSheet] Company data: $company');
    debugPrint('🔍 [CodesSheet] Keys: ${(company as Map).keys}');

    final companyCode = company['company_code'] as String? ?? '';
    final companyName = company['company_name'] as String;
    final stores = company['stores'] as List<dynamic>? ?? [];

    debugPrint('🔍 [CodesSheet] Company code: "$companyCode"');
    debugPrint('🔍 [CodesSheet] Company name: "$companyName"');
    debugPrint('🔍 [CodesSheet] Store count: ${stores.length}');

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: TossColors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        decoration: const BoxDecoration(
          color: TossColors.background,
          borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
        ),
        child: Column(
          children: [
            // Drag handle
            Container(
              width: 40,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: TossSpacing.space3),
              decoration: BoxDecoration(
                color: TossColors.gray300,
                borderRadius: BorderRadius.circular(TossBorderRadius.xs),
              ),
            ),

            // Header
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: TossSpacing.space4),
              child: Row(
                children: [
                  Text(
                    'Company & Store Codes',
                    style: TossTextStyles.h3.copyWith(
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: Icon(Icons.close, color: TossColors.textSecondary),
                  ),
                ],
              ),
            ),

            const Divider(height: 1),

            // Codes List - Scrollable
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                padding: const EdgeInsets.fromLTRB(
                  TossSpacing.space4,
                  0,
                  TossSpacing.space4,
                  TossSpacing.space4,
                ),
                child: Column(
                  children: [
                  // Company Code
                  _buildCodeCard(
                    context: context,
                    title: companyName,
                    subtitle: 'Company Code',
                    code: companyCode,
                    icon: Icons.business,
                  ),

                  // Store Codes
                  if (stores.isNotEmpty) ...[
                    const SizedBox(height: TossSpacing.space3),
                    ...stores.map((store) {
                      final storeName = store['store_name'] as String;
                      final storeCode = store['store_code'] as String? ?? '';
                      return Padding(
                        padding: const EdgeInsets.only(bottom: TossSpacing.space3),
                        child: _buildCodeCard(
                          context: context,
                          title: storeName,
                          subtitle: 'Store Code',
                          code: storeCode,
                          icon: Icons.store_outlined,
                        ),
                      );
                    }).toList(),
                  ],
                ],
              ),
            ),
            ),
          ],
        ),
      ),
    );
  }

  /// Build individual code card with copy functionality (matches legacy design)
  Widget _buildCodeCard({
    required BuildContext context,
    required String title,
    required String subtitle,
    required String code,
    required IconData icon,
  }) {
    return Material(
      color: TossColors.transparent,
      child: InkWell(
        onTap: code.isNotEmpty ? () => _copyCodeToClipboard(context, code, subtitle) : null,
        borderRadius: BorderRadius.circular(TossBorderRadius.lg),
        child: Container(
          padding: const EdgeInsets.all(TossSpacing.space4),
          decoration: BoxDecoration(
            color: TossColors.gray100.withOpacity(0.5),
            borderRadius: BorderRadius.circular(TossBorderRadius.lg),
            border: Border.all(
              color: TossColors.border.withOpacity(0.3),
            ),
          ),
          child: Row(
            children: [
              // Icon
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: TossColors.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(TossBorderRadius.md),
                ),
                child: Icon(icon, color: TossColors.primary, size: 20),
              ),
              const SizedBox(width: TossSpacing.space3),
              // Title and subtitle
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: TossTextStyles.body.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 2),
                    Text(
                      subtitle,
                      style: TossTextStyles.caption.copyWith(
                        color: TossColors.textSecondary,
                      ),
                    ),
                  ],
                ),
              ),
              // Code and copy button
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    code.isEmpty ? 'No code' : code,
                    style: TossTextStyles.body.copyWith(
                      fontWeight: FontWeight.w600,
                      color: code.isEmpty ? TossColors.textTertiary : TossColors.textPrimary,
                    ),
                  ),
                  if (code.isNotEmpty) ...[
                    const SizedBox(height: 4),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: TossSpacing.space2,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: TossColors.primary.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(TossBorderRadius.xs),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            Icons.copy_outlined,
                            size: 12,
                            color: TossColors.primary,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            'Copy',
                            style: TossTextStyles.caption.copyWith(
                              color: TossColors.primary,
                              fontWeight: FontWeight.w500,
                              fontSize: 11,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// Copy code to clipboard with feedback
  void _copyCodeToClipboard(BuildContext context, String code, String label) {
    Clipboard.setData(ClipboardData(text: code));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$label "$code" copied!'),
        duration: const Duration(seconds: 2),
        backgroundColor: TossColors.primary,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  /// Handle logout with enterprise-grade cleanup
  ///
  /// Safe logout flow that prevents widget tree errors:
  /// 1. Read all providers BEFORE starting logout
  /// 2. Execute auth signOut (triggers GoRouter redirect)
  /// 3. Let GoRouter handle navigation automatically
  /// 4. NO manual pop() - let the menu close naturally during navigation
  Future<void> _handleLogout() async {
    try {
      debugPrint('🔵 [Homepage] Logging out...');

      // ✅ Read all providers BEFORE logout starts
      // This prevents "Cannot use ref after dispose" errors
      final authService = ref.read(authServiceProvider);

      if (!mounted) return;

      // Show loading indicator
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(TossColors.white),
                ),
              ),
              const SizedBox(width: TossSpacing.space3),
              const Text('Logging out...'),
            ],
          ),
          backgroundColor: TossColors.primary,
          duration: const Duration(seconds: 2),
        ),
      );

      // ✅ Small delay to show the loading message
      await Future.delayed(const Duration(milliseconds: 300));

      // ✅ Execute auth logout
      // This will:
      // 1. Clear session
      // 2. Sign out from Supabase
      // 3. Invalidate providers
      // 4. Trigger GoRouter redirect (auth state changes to null)
      // 5. PopupMenu will close automatically during navigation
      await authService.signOut();
      debugPrint('🔵 [Homepage] Auth logout completed');

      // ✅ Clear app state AFTER auth logout
      if (mounted) {
        final appStateNotifier = ref.read(appStateProvider.notifier);
        appStateNotifier.signOut();
        debugPrint('🔵 [Homepage] App state cleared');
      }

      // Note: Widget is disposed here due to GoRouter redirect
      // PopupMenu closes automatically, no manual pop() needed
      // This prevents "You have popped the last page" error

      if (mounted) {
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
      }

      // GoRouter will automatically redirect to /auth/login
      // No manual navigation needed!

    } catch (e) {
      debugPrint('🔵 [Homepage] Logout failed: $e');

      if (mounted) {
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Logout failed: $e'),
            backgroundColor: TossColors.error,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(TossBorderRadius.lg),
            ),
          ),
        );
      }
    }
  }

  Future<void> _handleRefresh() async {
    debugPrint('🔵 [Homepage] Refreshing all data...');

    final appStateNotifier = ref.read(appStateProvider.notifier);

    try {
      // Clear AppState cache to force fresh fetch
      appStateNotifier.updateCategoryFeatures([]);
      debugPrint('🔵 [Homepage] Cleared category cache');

      // Invalidate all homepage providers to refresh data
      ref.invalidate(userCompaniesProvider);
      ref.invalidate(categoriesWithFeaturesProvider);
      ref.invalidate(quickAccessFeaturesProvider);
      ref.invalidate(revenueProvider);

      // Wait for providers to reload and update AppState
      await Future.wait([
        ref.read(userCompaniesProvider.future),
        ref.read(categoriesWithFeaturesProvider.future),
      ]);

      debugPrint('🔵 [Homepage] Refresh completed successfully');

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Data refreshed successfully'),
            backgroundColor: TossColors.success,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(TossBorderRadius.lg),
            ),
          ),
        );
      }
    } catch (e) {
      debugPrint('🔵 [Homepage] Refresh failed: $e');

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Failed to refresh data'),
            backgroundColor: TossColors.error,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(TossBorderRadius.lg),
            ),
          ),
        );
      }
    }
  }
}

class _PinnedHelloDelegate extends SliverPersistentHeaderDelegate {
  final AppState appState;

  const _PinnedHelloDelegate({
    required this.appState,
  });

  @override
  double get minExtent => 85.0;

  @override
  double get maxExtent => 85.0;

  @override
  Widget build(
    BuildContext context,
    double shrinkOffset,
    bool overlapsContent,
  ) {
    // Debug: Check AppState values
    debugPrint('🟢 [UI.HelloSection] Building with AppState:');
    debugPrint('🟢 [UI.HelloSection]   user: ${appState.user}');
    debugPrint('🟢 [UI.HelloSection]   companyName: "${appState.companyName}"');
    debugPrint('🟢 [UI.HelloSection]   storeName: "${appState.storeName}"');
    debugPrint('🟢 [UI.HelloSection]   companyChoosen: "${appState.companyChoosen}"');
    debugPrint('🟢 [UI.HelloSection]   storeChoosen: "${appState.storeChoosen}"');

    // Extract user name from AppState
    final firstName = appState.user['user_first_name'] as String? ?? '';
    final lastName = appState.user['user_last_name'] as String? ?? '';
    final userName = firstName.isNotEmpty
        ? (lastName.isNotEmpty ? '$firstName $lastName' : firstName)
        : 'User';

    debugPrint('🟢 [UI.HelloSection]   Computed userName: "$userName"');

    // Get company and store names from AppState
    final companyName = appState.companyName.isNotEmpty
        ? appState.companyName
        : (appState.companyChoosen.isNotEmpty ? 'Company Selected' : 'No Company');
    final storeName = appState.storeName;

    debugPrint('🟢 [UI.HelloSection]   Computed companyName: "$companyName"');
    debugPrint('🟢 [UI.HelloSection]   Computed storeName: "$storeName"');

    return Container(
      color: TossColors.gray100,
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: TossSpacing.space4),
        decoration: BoxDecoration(
          color: TossColors.surface,
          borderRadius: BorderRadius.circular(TossBorderRadius.xl),
          boxShadow: TossShadows.card,
        ),
        padding: const EdgeInsets.symmetric(
          horizontal: TossSpacing.space4,
          vertical: TossSpacing.space3,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // User greeting with actual name
            Text(
              'Hello, $userName!',
              style: TossTextStyles.h2.copyWith(
                color: TossColors.textPrimary,
                fontWeight: FontWeight.w700,
                letterSpacing: -0.5,
              ),
              overflow: TextOverflow.ellipsis,
              maxLines: 1,
            ),

            const SizedBox(height: TossSpacing.space1),

            // Company and Store info with actual names
            Row(
              children: [
                Text(
                  companyName,
                  style: TossTextStyles.body.copyWith(
                    color: TossColors.primary,
                    fontWeight: FontWeight.w600,
                    fontSize: 14,
                    letterSpacing: -0.2,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
                if (appState.storeChoosen.isNotEmpty && storeName.isNotEmpty) ...[
                  Text(
                    ' • ',
                    style: TossTextStyles.body.copyWith(
                      color: TossColors.textTertiary,
                    ),
                  ),
                  Expanded(
                    child: Text(
                      storeName,
                      style: TossTextStyles.caption.copyWith(
                        color: TossColors.textSecondary,
                        fontWeight: FontWeight.w500,
                      ),
                      overflow: TextOverflow.ellipsis,
                      maxLines: 1,
                    ),
                  ),
                ],
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) {
    return true;
  }
}
