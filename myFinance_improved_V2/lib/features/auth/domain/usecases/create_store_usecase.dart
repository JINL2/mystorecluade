// lib/features/auth/domain/usecases/create_store_usecase.dart

import '../entities/store_entity.dart';
import '../exceptions/auth_exceptions.dart';
import '../exceptions/validation_exception.dart';
import '../repositories/store_repository.dart';
import '../validators/name_validator.dart';
import '../value_objects/create_store_command.dart';

/// Create store use case.
///
/// Handles store creation with validation.
/// Throws exceptions on validation or business rule failures.
class CreateStoreUseCase {
  final StoreRepository _storeRepository;

  const CreateStoreUseCase({
    required StoreRepository storeRepository,
  }) : _storeRepository = storeRepository;

  /// Execute store creation with validation
  ///
  /// Throws:
  /// - [ValidationException] for validation errors
  /// - [StoreCodeExistsException] if store code already exists
  /// - [AuthException] for other business rule failures
  Future<Store> execute(CreateStoreCommand command) async {
    // Step 1: Validate store name
    final nameError = NameValidator.validateBusinessName(command.name);
    if (nameError != null) {
      throw ValidationException(nameError);
    }

    // Step 2: Check store code uniqueness (if provided)
    if (command.storeCode != null && command.storeCode!.isNotEmpty) {
      final codeExists = await _storeRepository.codeExists(
        companyId: command.companyId,
        storeCode: command.storeCode!,
      );
      if (codeExists) {
        throw StoreCodeExistsException(code: command.storeCode);
      }
    }

    // Step 3: Create store entity with operational settings
    final store = Store(
      id: '', // Will be generated by backend
      name: command.name.trim(),
      companyId: command.companyId,
      storeCode: command.storeCode?.trim(),
      phone: command.phone?.trim(),
      address: command.address?.trim(),
      timezone: command.timezone,
      description: command.description?.trim(),
      // Operational settings from command
      huddleTimeMinutes: command.huddleTimeMinutes,
      paymentTimeDays: command.paymentTimeDays,
      allowedDistanceMeters: command.allowedDistanceMeters,
      isActive: true,
      createdAt: DateTime.now(),
    );

    // Step 4: Validate entity
    final validation = store.validate();
    if (!validation.isValid) {
      throw ValidationException(validation.errors.join(', '));
    }

    // Step 5: Save to repository (repository handles exceptions)
    return await _storeRepository.create(store);
  }
}
