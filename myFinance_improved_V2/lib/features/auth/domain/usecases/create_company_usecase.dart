// lib/features/auth/domain/usecases/create_company_usecase.dart

import '../entities/company_entity.dart';
import '../exceptions/auth_exceptions.dart';
import '../exceptions/validation_exception.dart';
import '../repositories/company_repository.dart';
import '../validators/name_validator.dart';
import '../validators/email_validator.dart';
import '../value_objects/create_company_command.dart';

/// Create company use case.
///
/// Handles company creation with validation.
/// Throws exceptions on validation or business rule failures.
class CreateCompanyUseCase {
  final CompanyRepository _companyRepository;

  const CreateCompanyUseCase({
    required CompanyRepository companyRepository,
  }) : _companyRepository = companyRepository;

  /// Execute company creation with validation
  ///
  /// Throws:
  /// - [ValidationException] for validation errors
  /// - [CompanyNameExistsException] if company name already exists
  /// - [AuthException] for other business rule failures
  Future<Company> execute(CreateCompanyCommand command) async {
    // Step 1: Validate company name
    final nameError = NameValidator.validateBusinessName(command.name);
    if (nameError != null) {
      throw ValidationException(nameError);
    }

    // Step 2: Validate email (if provided)
    if (command.email != null && command.email!.isNotEmpty) {
      final emailError = EmailValidator.validate(command.email!);
      if (emailError != null) {
        throw ValidationException(emailError);
      }
    }

    // Step 3: Check name uniqueness
    final nameExists = await _companyRepository.nameExists(
      name: command.name,
      ownerId: command.ownerId,
    );
    if (nameExists) {
      throw CompanyNameExistsException(name: command.name);
    }

    // Step 4: Create company entity
    final company = Company(
      id: '', // Will be generated by backend
      name: command.name.trim(),
      businessNumber: command.businessNumber?.trim(),
      email: command.email?.trim(),
      phone: command.phone?.trim(),
      address: command.address?.trim(),
      companyTypeId: command.companyTypeId,
      currencyId: command.currencyId,
      companyCode: null, // Will be generated by backend
      ownerId: command.ownerId,
      createdAt: DateTime.now(),
    );

    // Step 5: Validate entity
    final validation = company.validate();
    if (!validation.isValid) {
      throw ValidationException(validation.errors.join(', '));
    }

    // Step 6: Save to repository (repository handles exceptions)
    return await _companyRepository.create(company);
  }
}
