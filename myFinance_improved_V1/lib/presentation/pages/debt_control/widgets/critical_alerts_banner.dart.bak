import 'package:flutter/material.dart';
import '../../../../core/themes/toss_colors.dart';
import '../../../../core/themes/toss_text_styles.dart';
import '../../../../core/themes/toss_spacing.dart';
import '../../../../core/themes/toss_animations.dart';
import '../models/debt_control_models.dart';

/// Critical alerts banner for proactive debt management notifications
/// 
/// Displays high-priority alerts at the top of the debt control page
/// with color-coded severity and tap-to-action functionality.
class CriticalAlertsBanner extends StatefulWidget {
  final List<CriticalAlert> alerts;
  final Function(CriticalAlert) onAlertTap;

  const CriticalAlertsBanner({
    super.key,
    required this.alerts,
    required this.onAlertTap,
  });

  @override
  State<CriticalAlertsBanner> createState() => _CriticalAlertsBannerState();
}

class _CriticalAlertsBannerState extends State<CriticalAlertsBanner>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _slideAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();
    
    _animationController = AnimationController(
      duration: TossAnimations.medium,
      vsync: this,
    );
    
    _slideAnimation = Tween<double>(
      begin: -50.0,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutCubic,
    ));
    
    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Color _getAlertColor(String severity) {
    switch (severity) {
      case 'critical':
        return TossColors.error;
      case 'warning':
        return TossColors.warning;
      case 'info':
        return TossColors.info;
      default:
        return TossColors.primary;
    }
  }

  IconData _getAlertIcon(String type) {
    switch (type) {
      case 'overdue_critical':
        return Icons.priority_high;
      case 'payment_received':
        return Icons.payment;
      case 'dispute_pending':
        return Icons.report_problem;
      default:
        return Icons.notifications;
    }
  }

  @override
  Widget build(BuildContext context) {
    if (widget.alerts.isEmpty) return const SizedBox.shrink();

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, _slideAnimation.value),
          child: Opacity(
            opacity: _opacityAnimation.value,
            child: Container(
              margin: EdgeInsets.only(bottom: TossSpacing.space3),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                children: widget.alerts
                    .map((alert) => _buildAlertCard(alert))
                    .toList(),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildAlertCard(CriticalAlert alert) {
    final alertColor = _getAlertColor(alert.severity);
    final alertIcon = _getAlertIcon(alert.type);

    return Container(
      margin: EdgeInsets.only(bottom: TossSpacing.xs),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            alertColor,
            alertColor.withOpacity(0.8),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () => widget.onAlertTap(alert),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding: EdgeInsets.all(TossSpacing.m),
            child: Row(
              children: [
                // Alert Icon
                Container(
                  padding: EdgeInsets.all(TossSpacing.s),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    alertIcon,
                    color: Colors.white,
                    size: 24,
                  ),
                ),
                
                SizedBox(width: TossSpacing.m),
                
                // Alert Content
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              alert.message,
                              style: TossTextStyles.body1.copyWith(
                                color: Colors.white,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                          if (alert.count > 1)
                            Container(
                              padding: EdgeInsets.symmetric(
                                horizontal: TossSpacing.s,
                                vertical: TossSpacing.xs,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.2),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Text(
                                '${alert.count}',
                                style: TossTextStyles.caption.copyWith(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                        ],
                      ),
                      
                      SizedBox(height: TossSpacing.xs),
                      
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            _getAlertTypeLabel(alert.type),
                            style: TossTextStyles.caption.copyWith(
                              color: Colors.white.withOpacity(0.9),
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          Row(
                            children: [
                              Text(
                                'Tap to view',
                                style: TossTextStyles.caption.copyWith(
                                  color: Colors.white.withOpacity(0.9),
                                ),
                              ),
                              SizedBox(width: TossSpacing.xs),
                              Icon(
                                Icons.arrow_forward_ios,
                                color: Colors.white.withOpacity(0.9),
                                size: 12,
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _getAlertTypeLabel(String type) {
    switch (type) {
      case 'overdue_critical':
        return 'Critical Overdue Items';
      case 'payment_received':
        return 'Recent Payments';
      case 'dispute_pending':
        return 'Pending Disputes';
      default:
        return 'Alert';
    }
  }
}