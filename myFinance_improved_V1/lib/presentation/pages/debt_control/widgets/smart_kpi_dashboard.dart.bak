import 'package:flutter/material.dart';
import '../../../../core/themes/toss_colors.dart';
import '../../../../core/themes/toss_text_styles.dart';
import '../../../../core/themes/toss_spacing.dart';
import '../../../../core/themes/toss_animations.dart';
import '../../../../core/utils/number_formatter.dart';
import '../models/debt_control_models.dart';

/// Smart KPI Dashboard displaying key debt management metrics
/// 
/// Features intelligent trend indicators, color-coded status, and
/// tap-to-drill-down functionality for detailed analysis.
class SmartKPIDashboard extends StatefulWidget {
  final KPIMetrics metrics;

  const SmartKPIDashboard({
    super.key,
    required this.metrics,
  });

  @override
  State<SmartKPIDashboard> createState() => _SmartKPIDashboardState();
}

class _SmartKPIDashboardState extends State<SmartKPIDashboard>
    with TickerProviderStateMixin {
  
  late List<AnimationController> _animationControllers;
  late List<Animation<double>> _scaleAnimations;
  late List<Animation<double>> _fadeAnimations;

  @override
  void initState() {
    super.initState();
    _setupAnimations();
  }

  void _setupAnimations() {
    _animationControllers = List.generate(4, (index) => 
      AnimationController(
        duration: Duration(milliseconds: 600 + (index * 100)),
        vsync: this,
      ),
    );

    _scaleAnimations = _animationControllers.map((controller) =>
      Tween<double>(begin: 0.8, end: 1.0).animate(
        CurvedAnimation(parent: controller, curve: Curves.elasticOut),
      ),
    ).toList();

    _fadeAnimations = _animationControllers.map((controller) =>
      Tween<double>(begin: 0.0, end: 1.0).animate(
        CurvedAnimation(parent: controller, curve: Curves.easeInOut),
      ),
    ).toList();

    // Start animations with staggered delay
    for (int i = 0; i < _animationControllers.length; i++) {
      Future.delayed(Duration(milliseconds: i * 150), () {
        if (mounted) {
          _animationControllers[i].forward();
        }
      });
    }
  }

  @override
  void dispose() {
    for (final controller in _animationControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(TossSpacing.s),
      child: GridView.count(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        crossAxisCount: 2,
        mainAxisSpacing: TossSpacing.m,
        crossAxisSpacing: TossSpacing.m,
        childAspectRatio: 1.3,
        children: [
          _buildKPICard(
            index: 0,
            title: 'Net Position',
            value: NumberFormatter.formatCurrency(widget.metrics.netPosition),
            trend: widget.metrics.netPositionTrend,
            icon: Icons.account_balance_wallet,
            color: TossColors.primary,
            onTap: () => _showNetPositionDetails(),
          ),
          _buildKPICard(
            index: 1,
            title: 'Avg Days Outstanding',
            value: '${widget.metrics.avgDaysOutstanding}d',
            trend: widget.metrics.agingTrend,
            icon: Icons.schedule,
            color: widget.metrics.avgDaysOutstanding > 45 
                ? TossColors.warning 
                : TossColors.success,
            onTap: () => _showAgingDetails(),
          ),
          _buildKPICard(
            index: 2,
            title: 'Collection Rate',
            value: '${widget.metrics.collectionRate.toStringAsFixed(1)}%',
            trend: widget.metrics.collectionTrend,
            icon: Icons.trending_up,
            color: widget.metrics.collectionRate >= 90 
                ? TossColors.success 
                : widget.metrics.collectionRate >= 75 
                    ? TossColors.warning 
                    : TossColors.error,
            onTap: () => _showCollectionDetails(),
          ),
          _buildKPICard(
            index: 3,
            title: 'Critical Items',
            value: widget.metrics.criticalCount.toString(),
            trend: widget.metrics.criticalTrend,
            icon: Icons.priority_high,
            color: widget.metrics.criticalCount > 0 
                ? TossColors.error 
                : TossColors.success,
            onTap: () => _showCriticalItems(),
          ),
        ],
      ),
    );
  }

  Widget _buildKPICard({
    required int index,
    required String title,
    required String value,
    required double trend,
    required IconData icon,
    required Color color,
    VoidCallback? onTap,
  }) {
    return AnimatedBuilder(
      animation: Listenable.merge([
        _scaleAnimations[index],
        _fadeAnimations[index],
      ]),
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimations[index].value,
          child: Opacity(
            opacity: _fadeAnimations[index].value,
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                onTap: onTap,
                borderRadius: BorderRadius.circular(16),
                child: Container(
                  padding: EdgeInsets.all(TossSpacing.m),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                    border: Border.all(
                      color: color.withOpacity(0.2),
                      width: 1,
                    ),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Header with icon and trend
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Container(
                            padding: EdgeInsets.all(TossSpacing.s),
                            decoration: BoxDecoration(
                              color: color.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Icon(
                              icon,
                              color: color,
                              size: 20,
                            ),
                          ),
                          _buildTrendIndicator(trend, color),
                        ],
                      ),
                      
                      // Value and title
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            value,
                            style: TossTextStyles.h2.copyWith(
                              color: TossColors.textPrimary,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: TossSpacing.xs),
                          Text(
                            title,
                            style: TossTextStyles.caption.copyWith(
                              color: TossColors.textSecondary,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTrendIndicator(double trend, Color baseColor) {
    if (trend == 0.0) {
      return Container(
        padding: EdgeInsets.symmetric(
          horizontal: TossSpacing.s,
          vertical: TossSpacing.xs,
        ),
        decoration: BoxDecoration(
          color: TossColors.backgroundSubtle,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Text(
          '0%',
          style: TossTextStyles.caption.copyWith(
            color: TossColors.textSecondary,
            fontWeight: FontWeight.w600,
          ),
        ),
      );
    }

    final isPositive = trend > 0;
    final trendColor = isPositive ? TossColors.success : TossColors.error;
    final trendIcon = isPositive ? Icons.trending_up : Icons.trending_down;

    return Container(
      padding: EdgeInsets.symmetric(
        horizontal: TossSpacing.s,
        vertical: TossSpacing.xs,
      ),
      decoration: BoxDecoration(
        color: trendColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            trendIcon,
            color: trendColor,
            size: 12,
          ),
          SizedBox(width: TossSpacing.xs),
          Text(
            '${trend.abs().toStringAsFixed(1)}%',
            style: TossTextStyles.caption.copyWith(
              color: trendColor,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  // Tap handlers for drill-down functionality
  void _showNetPositionDetails() {
    _showKPIDetails(
      title: 'Net Position Details',
      content: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildDetailRow(
            'Total Receivable', 
            NumberFormatter.formatCurrency(widget.metrics.totalReceivable),
            TossColors.success,
          ),
          _buildDetailRow(
            'Total Payable',
            NumberFormatter.formatCurrency(widget.metrics.totalPayable),
            TossColors.error,
          ),
          Divider(),
          _buildDetailRow(
            'Net Position',
            NumberFormatter.formatCurrency(widget.metrics.netPosition),
            TossColors.primary,
          ),
        ],
      ),
    );
  }

  void _showAgingDetails() {
    _showKPIDetails(
      title: 'Aging Analysis',
      content: Text(
        'Average days outstanding: ${widget.metrics.avgDaysOutstanding} days\n'
        'Trend: ${widget.metrics.agingTrend.toStringAsFixed(1)}%',
        style: TossTextStyles.body2,
      ),
    );
  }

  void _showCollectionDetails() {
    _showKPIDetails(
      title: 'Collection Performance',
      content: Text(
        'Collection rate: ${widget.metrics.collectionRate.toStringAsFixed(1)}%\n'
        'Trend: ${widget.metrics.collectionTrend.toStringAsFixed(1)}%',
        style: TossTextStyles.body2,
      ),
    );
  }

  void _showCriticalItems() {
    _showKPIDetails(
      title: 'Critical Items',
      content: Text(
        'Critical debts requiring attention: ${widget.metrics.criticalCount}\n'
        'Trend: ${widget.metrics.criticalTrend.toStringAsFixed(1)}%',
        style: TossTextStyles.body2,
      ),
    );
  }

  void _showKPIDetails({
    required String title,
    required Widget content,
  }) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        padding: EdgeInsets.all(TossSpacing.l),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TossTextStyles.h3.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: TossSpacing.m),
            content,
            SizedBox(height: TossSpacing.l),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: TossColors.primary,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: TossSpacing.m),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text('Close'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value, Color color) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: TossSpacing.xs),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TossTextStyles.body2.copyWith(
              color: TossColors.textSecondary,
            ),
          ),
          Text(
            value,
            style: TossTextStyles.body2.copyWith(
              color: color,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }
}